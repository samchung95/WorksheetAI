{
  "subject": "coding",
  "topics": [
    {
      "name": "Operators",
      "subtopics": [
        {
          "name": "Arithmetic Operators",
          "difficulty": "easy",
          "description": "Using operators like addition, subtraction, multiplication, and division to perform calculations."
        },
        {
          "name": "Comparison Operators",
          "difficulty": "easy",
          "description": "Comparing values using operators such as equal to, not equal to, greater than, and less than."
        },
        {
          "name": "Logical Operators",
          "difficulty": "easy",
          "description": "Combining multiple conditions using logical operators like and, or, and not."
        },
        {
          "name": "Assignment Operators",
          "difficulty": "medium",
          "description": "Assigning values to variables using operators like +=, -=, *=, and /=."
        },
        {
          "name": "Bitwise Operators",
          "difficulty": "hard",
          "description": "Performing operations on binary numbers using operators like AND, OR, XOR, and NOT."
        }
      ]
    },
    {
      "name": "Control Structures",
      "subtopics": [
        {
          "name": "If Statements",
          "difficulty": "easy",
          "description": "Executing code blocks based on specific conditions using if statements."
        },
        {
          "name": "Elif and Else",
          "difficulty": "easy",
          "description": "Handling multiple conditions and default cases with elif and else clauses."
        },
        {
          "name": "For Loops",
          "difficulty": "easy",
          "description": "Repeating actions for a fixed number of iterations using for loops."
        },
        {
          "name": "While Loops",
          "difficulty": "easy",
          "description": "Continuously executing code as long as a condition remains true using while loops."
        },
        {
          "name": "Nested Loops",
          "difficulty": "medium",
          "description": "Using loops within loops to handle more complex iteration scenarios."
        },
        {
          "name": "Loop Control Statements (break, continue, pass)",
          "difficulty": "medium",
          "description": "Controlling the flow of loops with statements like break, continue, and pass."
        }
      ]
    },
    {
      "name": "Functions",
      "subtopics": [
        {
          "name": "Defining Functions",
          "difficulty": "easy",
          "description": "Creating reusable blocks of code using the def keyword to define functions."
        },
        {
          "name": "Function Arguments",
          "difficulty": "medium",
          "description": "Passing values to functions through parameters and arguments."
        },
        {
          "name": "Return Values",
          "difficulty": "easy",
          "description": "Returning results from functions using the return statement."
        },
        {
          "name": "Lambda Functions",
          "difficulty": "hard",
          "description": "Creating small anonymous functions using the lambda keyword."
        },
        {
          "name": "Scope and Lifetime",
          "difficulty": "medium",
          "description": "Understanding variable scope and the lifetime of variables within functions."
        },
        {
          "name": "Docstrings and Documentation",
          "difficulty": "medium",
          "description": "Writing documentation strings to describe the purpose and usage of functions."
        }
      ]
    },
    {
      "name": "Data Structures",
      "subtopics": [
        {
          "name": "Lists",
          "difficulty": "easy",
          "description": "Creating and managing ordered collections of items using lists."
        },
        {
          "name": "Tuples",
          "difficulty": "easy",
          "description": "Using immutable ordered collections of items with tuples."
        },
        {
          "name": "Dictionaries",
          "difficulty": "easy",
          "description": "Storing key-value pairs in dictionaries for efficient data retrieval."
        },
        {
          "name": "Sets",
          "difficulty": "medium",
          "description": "Managing unordered collections of unique items with sets."
        },
        {
          "name": "List Comprehensions",
          "difficulty": "medium",
          "description": "Creating lists efficiently using concise syntax with list comprehensions."
        },
        {
          "name": "Dictionary Comprehensions",
          "difficulty": "medium",
          "description": "Generating dictionaries in a compact form using dictionary comprehensions."
        }
      ]
    },
    {
      "name": "Object-Oriented Programming (OOP)",
      "subtopics": [
        {
          "name": "Classes and Objects",
          "difficulty": "easy",
          "description": "Creating classes to define objects with attributes and methods."
        },
        {
          "name": "Attributes and Methods",
          "difficulty": "easy",
          "description": "Defining and using attributes (variables) and methods (functions) within classes."
        },
        {
          "name": "Inheritance",
          "difficulty": "medium",
          "description": "Creating new classes based on existing ones to promote code reuse."
        },
        {
          "name": "Encapsulation",
          "difficulty": "medium",
          "description": "Restricting access to certain components of objects to protect data integrity."
        },
        {
          "name": "Polymorphism",
          "difficulty": "hard",
          "description": "Allowing objects of different classes to be treated as objects of a common superclass."
        },
        {
          "name": "Magic Methods",
          "difficulty": "hard",
          "description": "Implementing special methods to define how objects behave with built-in functions and operators."
        }
      ]
    }
  ],
  "questions": [
    {
      "topic": "Control Structures",
      "subtopic": "If Statements",
      "difficulty": "hard",
      "description": "Executing code blocks based on specific conditions using if statements."
    },
    {
      "topic": "Functions",
      "subtopic": "Return Values",
      "difficulty": "hard",
      "description": "Returning results from functions using the return statement."
    },
    {
      "topic": "Functions",
      "subtopic": "Function Arguments",
      "difficulty": "hard",
      "description": "Passing values to functions through parameters and arguments."
    },
    {
      "topic": "Control Structures",
      "subtopic": "For Loops",
      "difficulty": "hard",
      "description": "Repeating actions for a fixed number of iterations using for loops."
    },
    {
      "topic": "Control Structures",
      "subtopic": "Elif and Else",
      "difficulty": "hard",
      "description": "Handling multiple conditions and default cases with elif and else clauses."
    },
    {
      "topic": "Operators",
      "subtopic": "Logical Operators",
      "difficulty": "hard",
      "description": "Combining multiple conditions using logical operators like and, or, and not."
    },
    {
      "topic": "Control Structures",
      "subtopic": "While Loops",
      "difficulty": "hard",
      "description": "Continuously executing code as long as a condition remains true using while loops."
    },
    {
      "topic": "Functions",
      "subtopic": "Defining Functions",
      "difficulty": "hard",
      "description": "Creating reusable blocks of code using the def keyword to define functions."
    },
    {
      "topic": "Operators",
      "subtopic": "Comparison Operators",
      "difficulty": "hard",
      "description": "Comparing values using operators such as equal to, not equal to, greater than, and less than."
    },
    {
      "topic": "Control Structures",
      "subtopic": "Loop Control Statements (break, continue, pass)",
      "difficulty": "hard",
      "description": "Controlling the flow of loops with statements like break, continue, and pass."
    },
    {
      "topic": "Control Structures",
      "subtopic": "Nested Loops",
      "difficulty": "hard",
      "description": "Using loops within loops to handle more complex iteration scenarios."
    },
    {
      "topic": "Operators",
      "subtopic": "Arithmetic Operators",
      "difficulty": "hard",
      "description": "Performing basic arithmetic operations like addition, subtraction, multiplication, and division."
    },
    {
      "topic": "Operators",
      "subtopic": "Assignment Operators",
      "difficulty": "hard",
      "description": "Assigning values to variables using operators like +=, -=, *=, and /=."
    },
    {
      "topic": "Functions",
      "subtopic": "Lambda Functions",
      "difficulty": "hard",
      "description": "Creating small anonymous functions using the lambda keyword."
    },
    {
      "topic": "Operators",
      "subtopic": "Bitwise Operators",
      "difficulty": "hard",
      "description": "Performing operations on binary numbers using operators like AND, OR, XOR, and NOT."
    },
    {
      "topic": "Operators",
      "subtopic": "Arithmetic Operators",
      "difficulty": "medium",
      "description": "Performing basic arithmetic operations like addition, subtraction, multiplication, and division."
    },
    {
      "topic": "Operators",
      "subtopic": "Comparison Operators",
      "difficulty": "medium",
      "description": "Comparing values using operators such as equal to, not equal to, greater than, and less than."
    },
    {
      "topic": "Operators",
      "subtopic": "Arithmetic Operators",
      "difficulty": "easy",
      "description": "Performing basic arithmetic operations like addition, subtraction, multiplication, and division."
    },
    {
      "topic": "Operators",
      "subtopic": "Comparison Operators",
      "difficulty": "easy",
      "description": "Comparing values using operators such as equal to, not equal to, greater than, and less than."
    },
    {
      "topic": "Operators",
      "subtopic": "Logical Operators",
      "difficulty": "easy",
      "description": "Combining multiple conditions using logical operators like and, or, and not."
    }
  ],
  "flavour": "academic",
  "difficulty": "hard",
  "created_at": "2025-02-15 17:35:36.249334"
}